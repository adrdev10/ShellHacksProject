{"remainingRequest":"C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\src\\components\\DashBoard.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\src\\components\\DashBoard.vue","mtime":1569106205933},{"path":"C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: \"DashBoard\",\r\n  data() {\r\n    return{\r\n      center: { lat: 45.508, lng: -73.587 },\r\n      markers: [],\r\n      places: [],\r\n      currentPlace: null\r\n    }\r\n  },\r\n  mounted() {\r\n    let fakeData = {\r\n      data: [25.738426,-80.36898, 25.744611, -80.344279],\r\n    };\r\n  \r\n    if(fakeData == null || fakeData.data.length == 0) {\r\n      console.log(\"No Shelters\")\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.geolocate();\r\n  },\r\n\r\n    \r\n  methods:{\r\n     addMarker(lat, lon) {\r\n      if (this.currentPlace) {\r\n        const marker = {\r\n          lat: this.currentPlace.geometry.location.lat(),\r\n          lng: this.currentPlace.geometry.location.lng()\r\n        };\r\n        this.markers.push({ position: marker });\r\n        this.places.push(this.currentPlace);\r\n        this.center = marker;\r\n        this.currentPlace = null;\r\n      }\r\n    },\r\n\r\n    setPlace(place) {\r\n      this.currentPlace = place;\r\n    },\r\n\r\n     geolocate: function() {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        };\r\n        this.markers.push({ position: this.center });\r\n      });\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["DashBoard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DashBoard.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div id=\"dashboard\">\r\n    <div id=\"left-side\">\r\n      <div>\r\n        <img src alt />\r\n        <h3>{props.name}</h3>\r\n      </div>\r\n    </div>\r\n    <div id=\"right-side\">\r\n      <div>\r\n        <gmap-map :center=\"center\" :zoom=\"12\" style=\"width:100%;  height: 700px;\">\r\n          <gmap-marker\r\n            :key=\"index\"\r\n            v-for=\"(m, index) in markers\"\r\n            :position=\"m.position\"\r\n          ></gmap-marker>\r\n        </gmap-map>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"DashBoard\",\r\n  data() {\r\n    return{\r\n      center: { lat: 45.508, lng: -73.587 },\r\n      markers: [],\r\n      places: [],\r\n      currentPlace: null\r\n    }\r\n  },\r\n  mounted() {\r\n    let fakeData = {\r\n      data: [25.738426,-80.36898, 25.744611, -80.344279],\r\n    };\r\n  \r\n    if(fakeData == null || fakeData.data.length == 0) {\r\n      console.log(\"No Shelters\")\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.geolocate();\r\n  },\r\n\r\n    \r\n  methods:{\r\n     addMarker(lat, lon) {\r\n      if (this.currentPlace) {\r\n        const marker = {\r\n          lat: this.currentPlace.geometry.location.lat(),\r\n          lng: this.currentPlace.geometry.location.lng()\r\n        };\r\n        this.markers.push({ position: marker });\r\n        this.places.push(this.currentPlace);\r\n        this.center = marker;\r\n        this.currentPlace = null;\r\n      }\r\n    },\r\n\r\n    setPlace(place) {\r\n      this.currentPlace = place;\r\n    },\r\n\r\n     geolocate: function() {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        };\r\n        this.markers.push({ position: this.center });\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n#dashboard {\r\n  background-color: white !important;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-content: flex-start;\r\n}\r\n\r\n#left-side {\r\n  flex-grow: 1;\r\n}\r\n\r\n#right-side {\r\n  flex-grow: 4;\r\n}\r\n\r\n#app {\r\n  background-color: white !important;\r\n}\r\n</style>\r\n\r\n\r\n"]}]}