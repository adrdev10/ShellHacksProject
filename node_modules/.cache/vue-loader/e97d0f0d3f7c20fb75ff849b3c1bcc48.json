{"remainingRequest":"C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\src\\components\\DashBoard.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\src\\components\\DashBoard.vue","mtime":1569149593855},{"path":"C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\cr7ad\\go\\src\\github.com\\xdragon1015\\sheltershell\\frontend\\shelterui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport states from \"./shelterData.json\";\r\n\r\nvar longitude = 0;\r\nvar latitude = 0;\r\nconst keyAPI = \"b63e8965c5e1631e57d5c87eaa0b8fd4\";\r\nconst AccountSID = \"AC36e4053e614b15fe37b4ac51dc065217\";\r\n\r\nconst pn = \"+12563635545\";\r\nconst mn = \"+17547154916\";\r\n\r\nexport default {\r\n  name: \"DashBoard\",\r\n  props: {\r\n    usersignedin: String,\r\n    numberpeople: String,\r\n    zip: String\r\n  },\r\n  computed: {\r\n    info() {\r\n      return states.shelters.map((item) => {\r\n      return item;\r\n      });\r\n    },\r\n    user: Object\r\n  },\r\n  data() {\r\n    return {\r\n      center: { lat: 45.508, lng: -73.587 },\r\n\t  places: [],\r\n\t  markers: [\r\n\t\t  { position: {lat: 30.607481, lng: -86.515763}, address: \"\", name: \"Shelter 1\"},\r\n\t\t  { position: {lat: 30.076522, lng: -81.749945}, address: \"\", name: \"Shelter 2\"},\r\n\t\t  { position: {lat: 28.447261, lng: -81.398536}, address: \"\", name: \"Shelter 3\"},\r\n\t\t  { position: {lat: 25.787836, lng: -80.256457}, address: \"\", name: \"Shelter 4\"},\r\n\t\t  { position: {lat: 27.305359, lng: -80.352243}, address: \"\", name: \"Shelter 5\"},\r\n\t\t  { position: {lat: 30.395532, lng: -84.271367}, address: \"\", name: \"Shelter 6\"},\r\n\t\t  { position: {lat: 27.956539, lng: -82.478864}, address: \"\", name: \"Shelter 7\"}\r\n\t  ],\r\n      currentPlace: null,\r\n      user: {\r\n        selectedShelter: [{}]\r\n      },\r\n      currentPlace: null,\r\n      selected: null,\r\n      options: [\r\n        { value: null, text: \"Please select an option\" },\r\n        { value: \"a\", text: \"This is First option\" },\r\n        { value: \"b\", text: \"Selected Option\" },\r\n        { value: { C: \"3PO\" }, text: \"This is an option with object value\" },\r\n        { value: \"d\", text: \"This one is disabled\", disabled: true }\r\n      ],\r\n      capacity: 0,\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    capacity: function(newVal, oldVal) {\r\n      console.log(newVal);\r\n      fetch(\"http://localhost:3000/postCalls\", {\r\n        method:'post',\r\n        body: this.capacity,\r\n      }).then((res, err) => {\r\n        if (err) {\r\n          console.log(\"Problem with server\")\r\n        }\r\n      })\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    let fakeData = {\r\n      data: [25.738426, -80.36898, 25.744611, -80.344279]\r\n    };\r\n\r\n    if (fakeData == null || fakeData.data.length == 0) {\r\n      console.log(\"No Shelters\");\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.geolocate();\r\n  },  \r\n\r\n  methods: {\r\n    addMarker(lat, lon) {\r\n      if (this.currentPlace) {\r\n        const marker = {\r\n          lat: this.currentPlace.geometry.location.lat(),\r\n          lng: this.currentPlace.geometry.location.lng()\r\n        };\r\n        this.markers.push({ position: marker });\r\n        this.places.push(this.currentPlace);\r\n        this.center = marker;\r\n        this.currentPlace = null;\r\n      }\r\n\t},\r\n\t\r\n\tmarkerClickHandler: function(event) {\r\n    console.log(event.latLng + \"\")\r\n\t\tObject.keys(event).push({address: \"Shelter 1\"})\r\n\t\tconsole.log(\"shelter got clicked: \" + event)\r\n\t\tconsole.log(\"shelter got clicked: \" + Object.keys(event))\r\n\t\tconsole.log(\"xa    : \" + event.xa)\r\n\t\tconsole.log(\"pixel: \" + event.pixel)\r\n    console.log(\"ua: \" + event.ua)\r\n\r\n    longitude = event.latLng.lng();\r\n    latitude = event.latLng.lat();\r\n    console.log(longitude)\r\n    console.log(latitude)\r\n\t},\r\n\r\n    decresedToZero(){\r\n      this.capacity++;\r\n    },\r\n\r\n    setPlace(place) {\r\n      this.currentPlace = place;\r\n    },\r\n\r\n    geolocate: function() {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        };\r\n        this.markers.push({ position: this.center });\r\n        this.markers.push({ position: {lat: 30.607481, lng: -86.515763}});\r\n        this.markers.push({ position: {lat: 30.076522, lng: -81.749945}});\r\n        this.markers.push({ position: {lat: 28.447261, lng: -81.398536}});\r\n        this.markers.push({ position: {lat: 25.787836, lng: -80.256457}});\r\n        this.markers.push({ position: {lat: 27.305359, lng: -80.352243}});\r\n        this.markers.push({ position: {lat: 30.395532, lng: -84.271367}});\r\n\t\tthis.markers.push({ position: {lat: 27.956539, lng: -82.478864}});\r\n\t\tthis.markers.push();\r\n      });\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["DashBoard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"DashBoard.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div id=\"dashboard\">\r\n    <div class=\"navigation\" id=\"myTopnav\">\r\n      <b-navbar toggleable=\"lg\" type=\"dark\" variant=\"info\">\r\n        <b-navbar-brand href=\"#\">HURRICANE RELIEF</b-navbar-brand>\r\n\r\n        <b-navbar-toggle target=\"nav-collapse\"></b-navbar-toggle>\r\n\r\n        <b-collapse id=\"nav-collapse\" is-nav>\r\n          <div style=\"margin-left: 0;\">\r\n            <b-navbar-nav>\r\n              <b-navbar-nav class=\"ml-auto\">\r\n                <b-nav-form class=\"ml-auto\">\r\n                  <b-form-input size=\"sm\" class=\"mr-sm-2\" placeholder=\"Search\"></b-form-input>\r\n                  <b-button size=\"sm\" class=\"my-2 my-sm-0\" type=\"submit\">Search</b-button>\r\n                </b-nav-form>\r\n              </b-navbar-nav>\r\n            </b-navbar-nav>\r\n          </div>\r\n          \r\n                <!-- Right aligned nav items -->\r\n                  <b-navbar-nav class=\"ml-auto\">\r\n\r\n                    <b-nav-item-dropdown right>\r\n                    <!-- Using 'button-content' slot -->\r\n                    <b-dropdown-item href=\"#\">Profile</b-dropdown-item>\r\n                    <b-dropdown-item href=\"#\">Sign Out</b-dropdown-item>\r\n                    </b-nav-item-dropdown>\r\n                </b-navbar-nav>\r\n            </b-collapse>\r\n        </b-navbar>\r\n    </div>  \r\n    <div id=\"left-side\"> \r\n        <div>\r\n          <b-navbar-nav class=\"ml-auto\">\r\n              <template>\r\n              <div>\r\n                <ul class=\"shelterUL\">\r\n                  <li v-bind:key=\"type\" v-for=\"inf in info\">\r\n                    Name: {{ inf.name }} | Zip: {{inf.zip}} | Capacity: {{inf.capacity}}\r\n                    <br> Longitude: {{inf.longitude}}\r\n                    | Latitude: {{inf.latitude}}\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              </template>\r\n          </b-navbar-nav>\r\n        </div>\r\n    </div>\r\n    <div id=\"right-side\">\r\n      <div>\r\n        <gmap-map :center=\"center\" :zoom=\"12\" style=\"width:100%;  height: 700px;\">\r\n          <gmap-marker\r\n            :key=\"index\"\r\n            v-for=\"(m, index) in markers\"\r\n\t\t\t      v-on:click=\"markerClickHandler\"\r\n            :position=\"m.position\"\r\n          ></gmap-marker>\r\n          <gmap-marker :key=\"index\" v-for=\"(m, index) in markers\" :position=\"m.position\"></gmap-marker>\r\n        </gmap-map>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport states from \"./shelterData.json\";\r\n\r\nvar longitude = 0;\r\nvar latitude = 0;\r\nconst keyAPI = \"b63e8965c5e1631e57d5c87eaa0b8fd4\";\r\nconst AccountSID = \"AC36e4053e614b15fe37b4ac51dc065217\";\r\n\r\nconst pn = \"+12563635545\";\r\nconst mn = \"+17547154916\";\r\n\r\nexport default {\r\n  name: \"DashBoard\",\r\n  props: {\r\n    usersignedin: String,\r\n    numberpeople: String,\r\n    zip: String\r\n  },\r\n  computed: {\r\n    info() {\r\n      return states.shelters.map((item) => {\r\n      return item;\r\n      });\r\n    },\r\n    user: Object\r\n  },\r\n  data() {\r\n    return {\r\n      center: { lat: 45.508, lng: -73.587 },\r\n\t  places: [],\r\n\t  markers: [\r\n\t\t  { position: {lat: 30.607481, lng: -86.515763}, address: \"\", name: \"Shelter 1\"},\r\n\t\t  { position: {lat: 30.076522, lng: -81.749945}, address: \"\", name: \"Shelter 2\"},\r\n\t\t  { position: {lat: 28.447261, lng: -81.398536}, address: \"\", name: \"Shelter 3\"},\r\n\t\t  { position: {lat: 25.787836, lng: -80.256457}, address: \"\", name: \"Shelter 4\"},\r\n\t\t  { position: {lat: 27.305359, lng: -80.352243}, address: \"\", name: \"Shelter 5\"},\r\n\t\t  { position: {lat: 30.395532, lng: -84.271367}, address: \"\", name: \"Shelter 6\"},\r\n\t\t  { position: {lat: 27.956539, lng: -82.478864}, address: \"\", name: \"Shelter 7\"}\r\n\t  ],\r\n      currentPlace: null,\r\n      user: {\r\n        selectedShelter: [{}]\r\n      },\r\n      currentPlace: null,\r\n      selected: null,\r\n      options: [\r\n        { value: null, text: \"Please select an option\" },\r\n        { value: \"a\", text: \"This is First option\" },\r\n        { value: \"b\", text: \"Selected Option\" },\r\n        { value: { C: \"3PO\" }, text: \"This is an option with object value\" },\r\n        { value: \"d\", text: \"This one is disabled\", disabled: true }\r\n      ],\r\n      capacity: 0,\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    capacity: function(newVal, oldVal) {\r\n      console.log(newVal);\r\n      fetch(\"http://localhost:3000/postCalls\", {\r\n        method:'post',\r\n        body: this.capacity,\r\n      }).then((res, err) => {\r\n        if (err) {\r\n          console.log(\"Problem with server\")\r\n        }\r\n      })\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    let fakeData = {\r\n      data: [25.738426, -80.36898, 25.744611, -80.344279]\r\n    };\r\n\r\n    if (fakeData == null || fakeData.data.length == 0) {\r\n      console.log(\"No Shelters\");\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.geolocate();\r\n  },  \r\n\r\n  methods: {\r\n    addMarker(lat, lon) {\r\n      if (this.currentPlace) {\r\n        const marker = {\r\n          lat: this.currentPlace.geometry.location.lat(),\r\n          lng: this.currentPlace.geometry.location.lng()\r\n        };\r\n        this.markers.push({ position: marker });\r\n        this.places.push(this.currentPlace);\r\n        this.center = marker;\r\n        this.currentPlace = null;\r\n      }\r\n\t},\r\n\t\r\n\tmarkerClickHandler: function(event) {\r\n    console.log(event.latLng + \"\")\r\n\t\tObject.keys(event).push({address: \"Shelter 1\"})\r\n\t\tconsole.log(\"shelter got clicked: \" + event)\r\n\t\tconsole.log(\"shelter got clicked: \" + Object.keys(event))\r\n\t\tconsole.log(\"xa    : \" + event.xa)\r\n\t\tconsole.log(\"pixel: \" + event.pixel)\r\n    console.log(\"ua: \" + event.ua)\r\n\r\n    longitude = event.latLng.lng();\r\n    latitude = event.latLng.lat();\r\n    console.log(longitude)\r\n    console.log(latitude)\r\n\t},\r\n\r\n    decresedToZero(){\r\n      this.capacity++;\r\n    },\r\n\r\n    setPlace(place) {\r\n      this.currentPlace = place;\r\n    },\r\n\r\n    geolocate: function() {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        };\r\n        this.markers.push({ position: this.center });\r\n        this.markers.push({ position: {lat: 30.607481, lng: -86.515763}});\r\n        this.markers.push({ position: {lat: 30.076522, lng: -81.749945}});\r\n        this.markers.push({ position: {lat: 28.447261, lng: -81.398536}});\r\n        this.markers.push({ position: {lat: 25.787836, lng: -80.256457}});\r\n        this.markers.push({ position: {lat: 27.305359, lng: -80.352243}});\r\n        this.markers.push({ position: {lat: 30.395532, lng: -84.271367}});\r\n\t\tthis.markers.push({ position: {lat: 27.956539, lng: -82.478864}});\r\n\t\tthis.markers.push();\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n#dashboard {\r\n  background-color: white !important;\r\n}\r\n#left-side {\r\n  flex-grow: 1;\r\n  float: left;\r\n  text-align: left;\r\n  overflow: auto;\r\n  margin-right: 0px;\r\n  width: 35%;\r\n}\r\n#right-side {\r\n  flex-grow: 4;\r\n  float: right;\r\n  margin: 0px;\r\n  text-align: right;\r\n  width: 65%;\r\n}\r\n#app {\r\n  background-color: white !important;\r\n}\r\n\r\nul {\r\n  padding: 0;\r\n  margin: 0;\r\n  list-style-type: none;\r\n\r\n}\r\n\r\n.shelterUL li{\r\n  padding: 25px;\r\n  font: 100px;\r\n  list-style-type: none;\r\n  list-style-position: inherit;\r\n  border: 1px solid black;\r\n  margin-top: 1px;\r\n}\r\n</style>"]}]}